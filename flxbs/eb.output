Nonterminals useless in grammar

    specifier-qualifier
    constant-expression
    conditional-expression
    logical-or-expression
    logical-and-expression
    and-expression
    or-expression
    equality-expression
    relational-expression
    additive-expression
    multiplicative-expression
    cast-expression
    unary-expression
    postfix-expression
    primary-expression
    constant
    expression
    assignment-expression
    assignment-operator
    unary-operator
    abstract-declarator
    type-name
    enum-specifier
    enumerator-list
    enumerator
    typedef-name
    initializer
    initializer-list
    selection-statement
    iteration-statement


Terminals unused in grammar

    if
    else
    while
    for
    not
    lesser
    greater
    leq
    plus
    minus
    mult
    div
    lnot_eq
    lesser_eq
    greater_eq
    eq
    and
    or
    land
    lor
    openK
    closeK
    mult_eq
    div_eq
    plus_eq
    minus_eq
    string
    character
    integer
    floating
    enum


Rules useless in grammar

   30 specifier-qualifier: type-specifier

   31 direct-declarator: direct-declarator constant-expression

   32 constant-expression: conditional-expression

   33 conditional-expression: logical-or-expression

   34 logical-or-expression: logical-and-expression
   35                      | logical-or-expression lor logical-and-expression

   36 logical-and-expression: logical-or-expression
   37                       | logical-and-expression land logical-or-expression

   38 and-expression: equality-expression
   39               | and-expression and equality-expression

   40 or-expression: equality-expression
   41              | or-expression or equality-expression

   42 equality-expression: relational-expression
   43                    | equality-expression leq relational-expression
   44                    | equality-expression lnot_eq relational-expression

   45 relational-expression: additive-expression
   46                      | relational-expression lesser additive-expression
   47                      | relational-expression greater additive-expression
   48                      | relational-expression lesser_eq additive-expression
   49                      | relational-expression greater_eq additive-expression

   50 additive-expression: multiplicative-expression
   51                    | additive-expression plus multiplicative-expression
   52                    | additive-expression minus multiplicative-expression

   53 multiplicative-expression: cast-expression
   54                          | multiplicative-expression mult cast-expression
   55                          | multiplicative-expression div cast-expression

   56 cast-expression: unary-expression
   57                | openP type-name closeP cast-expression

   58 unary-expression: postfix-expression
   59                 | unary-operator cast-expression

   60 postfix-expression: primary-expression
   61                   | postfix-expression openK expression closeK

   62 primary-expression: identifier
   63                   | constant
   64                   | string
   65                   | openP expression closeP

   66 constant: integer
   67         | character
   68         | floating

   69 expression: assignment-expression
   70           | expression comma assignment-expression

   71 assignment-expression: conditional-expression
   72                      | unary-expression assignment-operator assignment-expression

   73 assignment-operator: eq
   74                    | mult_eq
   75                    | div_eq
   76                    | plus_eq
   77                    | minus_eq

   78 unary-operator: %empty
   79               | plus
   80               | minus

   81 abstract-declarator: openP abstract-declarator closeP
   82                    | openK constant-expression closeK
   83                    | abstract-declarator openK closeK
   84                    | abstract-declarator openK constant-expression closeK
   85                    | abstract-declarator openP parameter-type-list closeP
   86                    | openP parameter-type-list closeP
   87                    | abstract-declarator openP closeP

   88 type-name: specifier-qualifier abstract-declarator

   89 enum-specifier: enum identifier openB enumerator-list closeB
   90               | enum openB enumerator-list closeB
   91               | enum identifier

   92 enumerator-list: enumerator
   93                | enumerator-list comma enumerator

   94 enumerator: identifier
   95           | identifier eq constant-expression

   96 typedef-name: identifier

   97 init-declarator: declarator eq initializer

   98 initializer: assignment-expression
   99            | openB initializer-list closeB
  100            | openB initializer-list comma closeB

  101 initializer-list: initializer
  102                 | initializer-list comma initializer

  103 statement: selection-statement
  104          | iteration-statement

  105 expression-statement: expression endline

  106 selection-statement: if openP expression closeP statement
  107                    | if openP expression closeP statement else statement

  108 iteration-statement: while openP expression closeP statement
  109                    | for openP expression endline expression endline expression closeP statement

  110 return-statement: return expression endline


Rules useless in parser due to conflicts

    9 direct-declarator: direct-declarator


State 12 conflicts: 1 shift/reduce, 7 reduce/reduce


Grammar

    0 $accept: function-definition $end

    1 function-definition: declaration-specifier declarator declaration compound-statement

    2 declaration-specifier: type-specifier

    3 type-specifier: void
    4               | char
    5               | int
    6               | float

    7 declarator: direct-declarator

    8 direct-declarator: identifier
    9                  | direct-declarator
   10                  | direct-declarator openP multi-identifier closeP
   11                  | direct-declarator openP parameter-type-list closeP
   12                  | openP declarator closeP

   13 parameter-type-list: parameter-list
   14                    | parameter-list comma

   15 parameter-list: parameter-declaration
   16               | parameter-list comma parameter-declaration

   17 parameter-declaration: declaration-specifier declarator
   18                      | declaration-specifier

   19 declaration: declaration-specifier init-declarator endline

   20 init-declarator: declarator

   21 compound-statement: openB declaration statement closeB

   22 statement: expression-statement
   23          | compound-statement
   24          | return-statement

   25 multi-identifier: %empty
   26                 | identifier

   27 expression-statement: endline

   28 return-statement: return endline
   29                 | break endline


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    char (258) 4
    int (259) 5
    float (260) 6
    void (261) 3
    if (262)
    else (263)
    while (264)
    for (265)
    return (266) 28
    break (267) 29
    not (268)
    lesser (269)
    greater (270)
    leq (271)
    plus (272)
    minus (273)
    mult (274)
    div (275)
    lnot_eq (276)
    lesser_eq (277)
    greater_eq (278)
    eq (279)
    and (280)
    or (281)
    land (282)
    lor (283)
    openB (284) 21
    closeB (285) 21
    openK (286)
    closeK (287)
    openP (288) 10 11 12
    closeP (289) 10 11 12
    mult_eq (290)
    div_eq (291)
    plus_eq (292)
    minus_eq (293)
    comma (294) 14 16
    endline (295) 19 27 28 29
    identifier (296) 8 26
    string (297)
    character (298)
    integer (299)
    floating (300)
    enum (301)


Nonterminals, with rules where they appear

    $accept (47)
        on left: 0
    function-definition (48)
        on left: 1
        on right: 0
    declaration-specifier (49)
        on left: 2
        on right: 1 17 18 19
    type-specifier (50)
        on left: 3 4 5 6
        on right: 2
    declarator (51)
        on left: 7
        on right: 1 12 17 20
    direct-declarator (52)
        on left: 8 9 10 11 12
        on right: 7 9 10 11
    parameter-type-list (53)
        on left: 13 14
        on right: 11
    parameter-list (54)
        on left: 15 16
        on right: 13 14 16
    parameter-declaration (55)
        on left: 17 18
        on right: 15 16
    declaration (56)
        on left: 19
        on right: 1 21
    init-declarator (57)
        on left: 20
        on right: 19
    compound-statement (58)
        on left: 21
        on right: 1 23
    statement (59)
        on left: 22 23 24
        on right: 21
    multi-identifier (60)
        on left: 25 26
        on right: 10
    expression-statement (61)
        on left: 27
        on right: 22
    return-statement (62)
        on left: 28 29
        on right: 24


State 0

    0 $accept: . function-definition $end

    char   shift, and go to state 1
    int    shift, and go to state 2
    float  shift, and go to state 3
    void   shift, and go to state 4

    function-definition    go to state 5
    declaration-specifier  go to state 6
    type-specifier         go to state 7


State 1

    4 type-specifier: char .

    $default  reduce using rule 4 (type-specifier)


State 2

    5 type-specifier: int .

    $default  reduce using rule 5 (type-specifier)


State 3

    6 type-specifier: float .

    $default  reduce using rule 6 (type-specifier)


State 4

    3 type-specifier: void .

    $default  reduce using rule 3 (type-specifier)


State 5

    0 $accept: function-definition . $end

    $end  shift, and go to state 8


State 6

    1 function-definition: declaration-specifier . declarator declaration compound-statement

    openP       shift, and go to state 9
    identifier  shift, and go to state 10

    declarator         go to state 11
    direct-declarator  go to state 12


State 7

    2 declaration-specifier: type-specifier .

    $default  reduce using rule 2 (declaration-specifier)


State 8

    0 $accept: function-definition $end .

    $default  accept


State 9

   12 direct-declarator: openP . declarator closeP

    openP       shift, and go to state 9
    identifier  shift, and go to state 10

    declarator         go to state 13
    direct-declarator  go to state 12


State 10

    8 direct-declarator: identifier .

    $default  reduce using rule 8 (direct-declarator)


State 11

    1 function-definition: declaration-specifier declarator . declaration compound-statement

    char   shift, and go to state 1
    int    shift, and go to state 2
    float  shift, and go to state 3
    void   shift, and go to state 4

    declaration-specifier  go to state 14
    type-specifier         go to state 7
    declaration            go to state 15


State 12

    7 declarator: direct-declarator .
    9 direct-declarator: direct-declarator .
   10                  | direct-declarator . openP multi-identifier closeP
   11                  | direct-declarator . openP parameter-type-list closeP

    openP  shift, and go to state 16

    char      reduce using rule 7 (declarator)
    char      [reduce using rule 9 (direct-declarator)]
    int       reduce using rule 7 (declarator)
    int       [reduce using rule 9 (direct-declarator)]
    float     reduce using rule 7 (declarator)
    float     [reduce using rule 9 (direct-declarator)]
    void      reduce using rule 7 (declarator)
    void      [reduce using rule 9 (direct-declarator)]
    openP     [reduce using rule 9 (direct-declarator)]
    closeP    reduce using rule 7 (declarator)
    closeP    [reduce using rule 9 (direct-declarator)]
    comma     reduce using rule 7 (declarator)
    comma     [reduce using rule 9 (direct-declarator)]
    endline   reduce using rule 7 (declarator)
    endline   [reduce using rule 9 (direct-declarator)]
    $default  reduce using rule 7 (declarator)


State 13

   12 direct-declarator: openP declarator . closeP

    closeP  shift, and go to state 17


State 14

   19 declaration: declaration-specifier . init-declarator endline

    openP       shift, and go to state 9
    identifier  shift, and go to state 10

    declarator         go to state 18
    direct-declarator  go to state 12
    init-declarator    go to state 19


State 15

    1 function-definition: declaration-specifier declarator declaration . compound-statement

    openB  shift, and go to state 20

    compound-statement  go to state 21


State 16

   10 direct-declarator: direct-declarator openP . multi-identifier closeP
   11                  | direct-declarator openP . parameter-type-list closeP

    char        shift, and go to state 1
    int         shift, and go to state 2
    float       shift, and go to state 3
    void        shift, and go to state 4
    identifier  shift, and go to state 22

    $default  reduce using rule 25 (multi-identifier)

    declaration-specifier  go to state 23
    type-specifier         go to state 7
    parameter-type-list    go to state 24
    parameter-list         go to state 25
    parameter-declaration  go to state 26
    multi-identifier       go to state 27


State 17

   12 direct-declarator: openP declarator closeP .

    $default  reduce using rule 12 (direct-declarator)


State 18

   20 init-declarator: declarator .

    $default  reduce using rule 20 (init-declarator)


State 19

   19 declaration: declaration-specifier init-declarator . endline

    endline  shift, and go to state 28


State 20

   21 compound-statement: openB . declaration statement closeB

    char   shift, and go to state 1
    int    shift, and go to state 2
    float  shift, and go to state 3
    void   shift, and go to state 4

    declaration-specifier  go to state 14
    type-specifier         go to state 7
    declaration            go to state 29


State 21

    1 function-definition: declaration-specifier declarator declaration compound-statement .

    $default  reduce using rule 1 (function-definition)


State 22

   26 multi-identifier: identifier .

    $default  reduce using rule 26 (multi-identifier)


State 23

   17 parameter-declaration: declaration-specifier . declarator
   18                      | declaration-specifier .

    openP       shift, and go to state 9
    identifier  shift, and go to state 10

    $default  reduce using rule 18 (parameter-declaration)

    declarator         go to state 30
    direct-declarator  go to state 12


State 24

   11 direct-declarator: direct-declarator openP parameter-type-list . closeP

    closeP  shift, and go to state 31


State 25

   13 parameter-type-list: parameter-list .
   14                    | parameter-list . comma
   16 parameter-list: parameter-list . comma parameter-declaration

    comma  shift, and go to state 32

    $default  reduce using rule 13 (parameter-type-list)


State 26

   15 parameter-list: parameter-declaration .

    $default  reduce using rule 15 (parameter-list)


State 27

   10 direct-declarator: direct-declarator openP multi-identifier . closeP

    closeP  shift, and go to state 33


State 28

   19 declaration: declaration-specifier init-declarator endline .

    $default  reduce using rule 19 (declaration)


State 29

   21 compound-statement: openB declaration . statement closeB

    return   shift, and go to state 34
    break    shift, and go to state 35
    openB    shift, and go to state 20
    endline  shift, and go to state 36

    compound-statement    go to state 37
    statement             go to state 38
    expression-statement  go to state 39
    return-statement      go to state 40


State 30

   17 parameter-declaration: declaration-specifier declarator .

    $default  reduce using rule 17 (parameter-declaration)


State 31

   11 direct-declarator: direct-declarator openP parameter-type-list closeP .

    $default  reduce using rule 11 (direct-declarator)


State 32

   14 parameter-type-list: parameter-list comma .
   16 parameter-list: parameter-list comma . parameter-declaration

    char   shift, and go to state 1
    int    shift, and go to state 2
    float  shift, and go to state 3
    void   shift, and go to state 4

    $default  reduce using rule 14 (parameter-type-list)

    declaration-specifier  go to state 23
    type-specifier         go to state 7
    parameter-declaration  go to state 41


State 33

   10 direct-declarator: direct-declarator openP multi-identifier closeP .

    $default  reduce using rule 10 (direct-declarator)


State 34

   28 return-statement: return . endline

    endline  shift, and go to state 42


State 35

   29 return-statement: break . endline

    endline  shift, and go to state 43


State 36

   27 expression-statement: endline .

    $default  reduce using rule 27 (expression-statement)


State 37

   23 statement: compound-statement .

    $default  reduce using rule 23 (statement)


State 38

   21 compound-statement: openB declaration statement . closeB

    closeB  shift, and go to state 44


State 39

   22 statement: expression-statement .

    $default  reduce using rule 22 (statement)


State 40

   24 statement: return-statement .

    $default  reduce using rule 24 (statement)


State 41

   16 parameter-list: parameter-list comma parameter-declaration .

    $default  reduce using rule 16 (parameter-list)


State 42

   28 return-statement: return endline .

    $default  reduce using rule 28 (return-statement)


State 43

   29 return-statement: break endline .

    $default  reduce using rule 29 (return-statement)


State 44

   21 compound-statement: openB declaration statement closeB .

    $default  reduce using rule 21 (compound-statement)
