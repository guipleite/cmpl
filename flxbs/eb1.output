Nonterminals useless in grammar

    specifier-qualifier
    constant-expression
    conditional-expression
    logical-or-expression
    logical-and-expression
    and-expression
    or-expression
    equality-expression
    relational-expression
    additive-expression
    multiplicative-expression
    cast-expression
    unary-expression
    postfix-expression
    primary-expression
    constant
    expression
    assignment-expression
    assignment-operator
    unary-operator
    abstract-declarator
    type-name
    enumerator-list
    enumerator
    typedef-name
    initializer
    initializer-list
    selection-statement
    iteration-statement


Terminals unused in grammar

    FOR
    WHILE
    IF
    ELSE
    PRINTF
    NUM
    '='
    AND
    OR
    '<'
    '>'
    LE
    GE
    EQ
    NE
    LT
    GT
    '+'
    '-'
    '*'
    '/'
    '['
    ']'


Rules useless in grammar

   30 specifier-qualifier: type-specifier

   31 direct-declarator: direct-declarator constant-expression

   32 constant-expression: conditional-expression

   33 conditional-expression: logical-or-expression

   34 logical-or-expression: logical-and-expression
   35                      | logical-or-expression OR logical-and-expression

   36 logical-and-expression: logical-or-expression
   37                       | logical-and-expression AND logical-or-expression

   38 and-expression: equality-expression
   39               | and-expression AND equality-expression

   40 or-expression: equality-expression
   41              | or-expression OR equality-expression

   42 equality-expression: relational-expression
   43                    | equality-expression EQ relational-expression
   44                    | equality-expression NE relational-expression

   45 relational-expression: additive-expression
   46                      | relational-expression LT additive-expression
   47                      | relational-expression GT additive-expression
   48                      | relational-expression LE additive-expression
   49                      | relational-expression GE additive-expression

   50 additive-expression: multiplicative-expression
   51                    | additive-expression '+' multiplicative-expression
   52                    | additive-expression '-' multiplicative-expression

   53 multiplicative-expression: cast-expression
   54                          | multiplicative-expression '*' cast-expression
   55                          | multiplicative-expression '/' cast-expression

   56 cast-expression: unary-expression
   57                | '(' type-name ')' cast-expression

   58 unary-expression: postfix-expression
   59                 | unary-operator cast-expression

   60 postfix-expression: primary-expression
   61                   | postfix-expression '[' expression ']'

   62 primary-expression: ID
   63                   | '(' expression ')'

   64 constant: NUM
   65         | CHAR
   66         | FLOAT

   67 expression: assignment-expression
   68           | expression ',' assignment-expression

   69 assignment-expression: conditional-expression
   70                      | unary-expression assignment-operator assignment-expression

   71 assignment-operator: '='

   72 unary-operator: %empty
   73               | '+'
   74               | '-'

   75 abstract-declarator: '(' abstract-declarator ')'
   76                    | '[' constant-expression ']'
   77                    | abstract-declarator '[' ']'
   78                    | abstract-declarator '[' constant-expression ']'
   79                    | abstract-declarator '(' parameter-type-list ')'
   80                    | '(' parameter-type-list ')'
   81                    | abstract-declarator '(' ')'

   82 type-name: specifier-qualifier abstract-declarator

   83 enumerator-list: enumerator
   84                | enumerator-list ',' enumerator

   85 enumerator: ID
   86           | ID '=' constant-expression

   87 typedef-name: ID

   88 init-declarator: declarator '=' initializer

   89 initializer: assignment-expression
   90            | '{' initializer-list '}'
   91            | '{' initializer-list ',' '}'

   92 initializer-list: initializer
   93                 | initializer-list ',' initializer

   94 statement: selection-statement
   95          | iteration-statement

   96 expression-statement: expression ';'

   97 selection-statement: IF '(' expression ')' statement
   98                    | IF '(' expression ')' statement ELSE statement

   99 iteration-statement: WHILE '(' expression ')' statement
  100                    | FOR '(' expression ';' expression ';' expression ')' statement

  101 return-statement: RETURN expression ';'


Rules useless in parser due to conflicts

    9 direct-declarator: direct-declarator


State 12 conflicts: 1 shift/reduce, 7 reduce/reduce


Grammar

    0 $accept: function-definition $end

    1 function-definition: declaration-specifier declarator declaration compound-statement

    2 declaration-specifier: type-specifier

    3 type-specifier: VOID
    4               | CHAR
    5               | INT
    6               | FLOAT

    7 declarator: direct-declarator

    8 direct-declarator: ID
    9                  | direct-declarator
   10                  | direct-declarator '(' multi-ID ')'
   11                  | direct-declarator '(' parameter-type-list ')'
   12                  | '(' declarator ')'

   13 parameter-type-list: parameter-list
   14                    | parameter-list ','

   15 parameter-list: parameter-declaration
   16               | parameter-list ',' parameter-declaration

   17 parameter-declaration: declaration-specifier declarator
   18                      | declaration-specifier

   19 declaration: declaration-specifier init-declarator ';'

   20 init-declarator: declarator

   21 compound-statement: '{' declaration statement '}'

   22 statement: expression-statement
   23          | compound-statement
   24          | return-statement

   25 multi-ID: %empty
   26         | ID

   27 expression-statement: ';'

   28 return-statement: RETURN ';'
   29                 | BREAK ';'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 10 11 12
    ')' (41) 10 11 12
    '*' (42)
    '+' (43)
    ',' (44) 14 16
    '-' (45)
    '/' (47)
    ';' (59) 19 27 28 29
    '<' (60)
    '=' (61)
    '>' (62)
    '[' (91)
    ']' (93)
    '{' (123) 21
    '}' (125) 21
    error (256)
    INT (258) 5
    FLOAT (259) 6
    CHAR (260) 4
    VOID (261) 3
    FOR (262)
    WHILE (263)
    IF (264)
    ELSE (265)
    PRINTF (266)
    RETURN (267) 28
    BREAK (268) 29
    NUM (269)
    ID (270) 8 26
    AND (271)
    OR (272)
    LE (273)
    GE (274)
    EQ (275)
    NE (276)
    LT (277)
    GT (278)


Nonterminals, with rules where they appear

    $accept (39)
        on left: 0
    function-definition (40)
        on left: 1
        on right: 0
    declaration-specifier (41)
        on left: 2
        on right: 1 17 18 19
    type-specifier (42)
        on left: 3 4 5 6
        on right: 2
    declarator (43)
        on left: 7
        on right: 1 12 17 20
    direct-declarator (44)
        on left: 8 9 10 11 12
        on right: 7 9 10 11
    parameter-type-list (45)
        on left: 13 14
        on right: 11
    parameter-list (46)
        on left: 15 16
        on right: 13 14 16
    parameter-declaration (47)
        on left: 17 18
        on right: 15 16
    declaration (48)
        on left: 19
        on right: 1 21
    init-declarator (49)
        on left: 20
        on right: 19
    compound-statement (50)
        on left: 21
        on right: 1 23
    statement (51)
        on left: 22 23 24
        on right: 21
    multi-ID (52)
        on left: 25 26
        on right: 10
    expression-statement (53)
        on left: 27
        on right: 22
    return-statement (54)
        on left: 28 29
        on right: 24


State 0

    0 $accept: . function-definition $end

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    CHAR   shift, and go to state 3
    VOID   shift, and go to state 4

    function-definition    go to state 5
    declaration-specifier  go to state 6
    type-specifier         go to state 7


State 1

    5 type-specifier: INT .

    $default  reduce using rule 5 (type-specifier)


State 2

    6 type-specifier: FLOAT .

    $default  reduce using rule 6 (type-specifier)


State 3

    4 type-specifier: CHAR .

    $default  reduce using rule 4 (type-specifier)


State 4

    3 type-specifier: VOID .

    $default  reduce using rule 3 (type-specifier)


State 5

    0 $accept: function-definition . $end

    $end  shift, and go to state 8


State 6

    1 function-definition: declaration-specifier . declarator declaration compound-statement

    ID   shift, and go to state 9
    '('  shift, and go to state 10

    declarator         go to state 11
    direct-declarator  go to state 12


State 7

    2 declaration-specifier: type-specifier .

    $default  reduce using rule 2 (declaration-specifier)


State 8

    0 $accept: function-definition $end .

    $default  accept


State 9

    8 direct-declarator: ID .

    $default  reduce using rule 8 (direct-declarator)


State 10

   12 direct-declarator: '(' . declarator ')'

    ID   shift, and go to state 9
    '('  shift, and go to state 10

    declarator         go to state 13
    direct-declarator  go to state 12


State 11

    1 function-definition: declaration-specifier declarator . declaration compound-statement

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    CHAR   shift, and go to state 3
    VOID   shift, and go to state 4

    declaration-specifier  go to state 14
    type-specifier         go to state 7
    declaration            go to state 15


State 12

    7 declarator: direct-declarator .
    9 direct-declarator: direct-declarator .
   10                  | direct-declarator . '(' multi-ID ')'
   11                  | direct-declarator . '(' parameter-type-list ')'

    '('  shift, and go to state 16

    INT       reduce using rule 7 (declarator)
    INT       [reduce using rule 9 (direct-declarator)]
    FLOAT     reduce using rule 7 (declarator)
    FLOAT     [reduce using rule 9 (direct-declarator)]
    CHAR      reduce using rule 7 (declarator)
    CHAR      [reduce using rule 9 (direct-declarator)]
    VOID      reduce using rule 7 (declarator)
    VOID      [reduce using rule 9 (direct-declarator)]
    '('       [reduce using rule 9 (direct-declarator)]
    ')'       reduce using rule 7 (declarator)
    ')'       [reduce using rule 9 (direct-declarator)]
    ','       reduce using rule 7 (declarator)
    ','       [reduce using rule 9 (direct-declarator)]
    ';'       reduce using rule 7 (declarator)
    ';'       [reduce using rule 9 (direct-declarator)]
    $default  reduce using rule 7 (declarator)


State 13

   12 direct-declarator: '(' declarator . ')'

    ')'  shift, and go to state 17


State 14

   19 declaration: declaration-specifier . init-declarator ';'

    ID   shift, and go to state 9
    '('  shift, and go to state 10

    declarator         go to state 18
    direct-declarator  go to state 12
    init-declarator    go to state 19


State 15

    1 function-definition: declaration-specifier declarator declaration . compound-statement

    '{'  shift, and go to state 20

    compound-statement  go to state 21


State 16

   10 direct-declarator: direct-declarator '(' . multi-ID ')'
   11                  | direct-declarator '(' . parameter-type-list ')'

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    CHAR   shift, and go to state 3
    VOID   shift, and go to state 4
    ID     shift, and go to state 22

    $default  reduce using rule 25 (multi-ID)

    declaration-specifier  go to state 23
    type-specifier         go to state 7
    parameter-type-list    go to state 24
    parameter-list         go to state 25
    parameter-declaration  go to state 26
    multi-ID               go to state 27


State 17

   12 direct-declarator: '(' declarator ')' .

    $default  reduce using rule 12 (direct-declarator)


State 18

   20 init-declarator: declarator .

    $default  reduce using rule 20 (init-declarator)


State 19

   19 declaration: declaration-specifier init-declarator . ';'

    ';'  shift, and go to state 28


State 20

   21 compound-statement: '{' . declaration statement '}'

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    CHAR   shift, and go to state 3
    VOID   shift, and go to state 4

    declaration-specifier  go to state 14
    type-specifier         go to state 7
    declaration            go to state 29


State 21

    1 function-definition: declaration-specifier declarator declaration compound-statement .

    $default  reduce using rule 1 (function-definition)


State 22

   26 multi-ID: ID .

    $default  reduce using rule 26 (multi-ID)


State 23

   17 parameter-declaration: declaration-specifier . declarator
   18                      | declaration-specifier .

    ID   shift, and go to state 9
    '('  shift, and go to state 10

    $default  reduce using rule 18 (parameter-declaration)

    declarator         go to state 30
    direct-declarator  go to state 12


State 24

   11 direct-declarator: direct-declarator '(' parameter-type-list . ')'

    ')'  shift, and go to state 31


State 25

   13 parameter-type-list: parameter-list .
   14                    | parameter-list . ','
   16 parameter-list: parameter-list . ',' parameter-declaration

    ','  shift, and go to state 32

    $default  reduce using rule 13 (parameter-type-list)


State 26

   15 parameter-list: parameter-declaration .

    $default  reduce using rule 15 (parameter-list)


State 27

   10 direct-declarator: direct-declarator '(' multi-ID . ')'

    ')'  shift, and go to state 33


State 28

   19 declaration: declaration-specifier init-declarator ';' .

    $default  reduce using rule 19 (declaration)


State 29

   21 compound-statement: '{' declaration . statement '}'

    RETURN  shift, and go to state 34
    BREAK   shift, and go to state 35
    ';'     shift, and go to state 36
    '{'     shift, and go to state 20

    compound-statement    go to state 37
    statement             go to state 38
    expression-statement  go to state 39
    return-statement      go to state 40


State 30

   17 parameter-declaration: declaration-specifier declarator .

    $default  reduce using rule 17 (parameter-declaration)


State 31

   11 direct-declarator: direct-declarator '(' parameter-type-list ')' .

    $default  reduce using rule 11 (direct-declarator)


State 32

   14 parameter-type-list: parameter-list ',' .
   16 parameter-list: parameter-list ',' . parameter-declaration

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    CHAR   shift, and go to state 3
    VOID   shift, and go to state 4

    $default  reduce using rule 14 (parameter-type-list)

    declaration-specifier  go to state 23
    type-specifier         go to state 7
    parameter-declaration  go to state 41


State 33

   10 direct-declarator: direct-declarator '(' multi-ID ')' .

    $default  reduce using rule 10 (direct-declarator)


State 34

   28 return-statement: RETURN . ';'

    ';'  shift, and go to state 42


State 35

   29 return-statement: BREAK . ';'

    ';'  shift, and go to state 43


State 36

   27 expression-statement: ';' .

    $default  reduce using rule 27 (expression-statement)


State 37

   23 statement: compound-statement .

    $default  reduce using rule 23 (statement)


State 38

   21 compound-statement: '{' declaration statement . '}'

    '}'  shift, and go to state 44


State 39

   22 statement: expression-statement .

    $default  reduce using rule 22 (statement)


State 40

   24 statement: return-statement .

    $default  reduce using rule 24 (statement)


State 41

   16 parameter-list: parameter-list ',' parameter-declaration .

    $default  reduce using rule 16 (parameter-list)


State 42

   28 return-statement: RETURN ';' .

    $default  reduce using rule 28 (return-statement)


State 43

   29 return-statement: BREAK ';' .

    $default  reduce using rule 29 (return-statement)


State 44

   21 compound-statement: '{' declaration statement '}' .

    $default  reduce using rule 21 (compound-statement)
